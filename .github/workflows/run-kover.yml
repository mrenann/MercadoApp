name: Kover Coverage

on:
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Run tests with Kover
        run: ./gradlew koverXmlReport --no-daemon

      - name: Validate report
        run: |
          if [ ! -f "build/reports/kover/report.xml" ]; then
            echo "‚ùå Kover report not found!"
            exit 1
          fi
          
          if ! grep -q "<counter type=\"INSTRUCTION\"" build/reports/kover/report.xml; then
            echo "‚ùå Invalid Kover report content!"
            exit 1
          fi

      - name: Post coverage comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const xml2js = require('xml2js');
            
            // Parse XML report
            const xml = fs.readFileSync('build/reports/kover/report.xml');
            const result = await xml2js.parseStringPromise(xml);
            
            // Extract coverage data
            const counters = result.report.counter[0].counter;
            const instructionCounter = counters.find(c => c.$.type === 'INSTRUCTION');
            const covered = parseInt(instructionCounter.$.covered);
            const missed = parseInt(instructionCounter.$.missed);
            const percentage = ((covered / (covered + missed)) * 100).toFixed(2);

            // Create comment
            const comment = `üîç **Kover Coverage Report**
            | Metric       | Coverage |
            |--------------|----------|
            | Instructions | ${percentage}% |
            
            **Details:** [Download Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            // Post to PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });