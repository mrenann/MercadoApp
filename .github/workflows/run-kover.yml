name: Android Kover Test Coverage

on:
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write
  contents: read

jobs:
  test-coverage:
    name: Generate Test Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with Kover
        run: ./gradlew koverXmlReport --stacktrace

      - name: Store XML report
        uses: actions/upload-artifact@v4
        with:
          name: kover-xml-report
          path: app/build/reports/kover/xml/report.xml

      - name: Extract coverage percentage
        id: kover-report
        run: |
          # Debug: check what files are in the kover directory
          echo "Conte√∫do do diret√≥rio app/build/reports/kover:"
          ls -la app/build/reports/kover/
          
          # Find the XML report file
          REPORT_PATH="app/build/reports/kover/report.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "‚ùå Report not found at $REPORT_PATH"
          
            # Try alternative locations
            ALTERNATIVE_PATH="app/build/reports/kover/xml/report.xml"
            if [ -f "$ALTERNATIVE_PATH" ]; then
              REPORT_PATH="$ALTERNATIVE_PATH"
              echo "‚úÖ Found report at alternative location: $REPORT_PATH"
            else
              echo "‚ùå Report not found at $ALTERNATIVE_PATH either"
          
              # Last attempt - find it anywhere in the build directory
              FOUND_PATH=$(find build -name "report.xml" -type f | head -n 1)
              if [ -n "$FOUND_PATH" ]; then
                REPORT_PATH="$FOUND_PATH"
                echo "‚úÖ Found report at: $REPORT_PATH"
              else
                echo "‚ùå Could not find any report.xml file"
                exit 1
              fi
            fi
          fi
          
          echo "Report content preview:"
          head -n 10 "$REPORT_PATH"
          
          # Try multiple XML extraction patterns
          echo "Attempting to extract coverage metrics..."
          
          # Method 1: Extract line-rate from coverage tag
          TOTAL_COVERAGE=$(grep -o 'line-rate="[0-9.]*"' "$REPORT_PATH" | head -n 1 | cut -d'"' -f2)
          
          # Method 2: If that fails, try extracting from counter tags
          if [ -z "$TOTAL_COVERAGE" ]; then
            echo "Method 1 failed, trying method 2..."
            LINE_COVERED=$(grep -o 'type="LINE" covered="[0-9]*"' "$REPORT_PATH" | cut -d'"' -f3)
            LINE_MISSED=$(grep -o 'type="LINE" missed="[0-9]*"' "$REPORT_PATH" | cut -d'"' -f3)
          
            if [ -n "$LINE_COVERED" ] && [ -n "$LINE_MISSED" ]; then
              TOTAL=$(($LINE_COVERED + $LINE_MISSED))
              if [ "$TOTAL" -gt 0 ]; then
                TOTAL_COVERAGE=$(echo "scale=4; $LINE_COVERED / $TOTAL" | bc)
              fi
            fi
          fi
          
          # Method 3: Try using xmllint for more reliable XML parsing
          if [ -z "$TOTAL_COVERAGE" ]; then
            echo "Method 2 failed, trying method 3 with xmllint..."
            apt-get update && apt-get install -y libxml2-utils
          
            TOTAL_COVERAGE=$(xmllint --xpath "string(/report/counter[@type='LINE']/@covered) div (string(/report/counter[@type='LINE']/@covered) + string(/report/counter[@type='LINE']/@missed))" "$REPORT_PATH" 2>/dev/null || echo "")
          
            if [ -z "$TOTAL_COVERAGE" ]; then
              TOTAL_COVERAGE=$(xmllint --xpath "string(//coverage/@line-rate)" "$REPORT_PATH" 2>/dev/null || echo "")
            fi
          fi
          
          # Final fallback - check actual XML structure and print for debugging
          if [ -z "$TOTAL_COVERAGE" ]; then
            echo "All extraction methods failed. XML structure may be unexpected."
            echo "First 30 lines of report:"
            head -n 30 "$REPORT_PATH"
          
            # Create a minimal default value to avoid workflow failure
            TOTAL_COVERAGE="0"
            echo "‚ö†Ô∏è Using default coverage value of 0%"
          fi
          
          # Validate and calculate percentage
          if [[ ! "$TOTAL_COVERAGE" =~ ^[0-9.]+$ ]]; then
            echo "‚ùå Invalid coverage value: $TOTAL_COVERAGE"
            TOTAL_COVERAGE="0"
          fi
          
          # Calculate coverage percentage
          COVERAGE_PERCENTAGE=$(echo "scale=2; $TOTAL_COVERAGE * 100" | bc -l)
          echo "üìä Coverage: ${COVERAGE_PERCENTAGE}%"
          echo "coverage=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-coverage
          message: |
            ## üìä Cobertura de C√≥digo
            
            **Cobertura Total: ${{ steps.kover-report.outputs.coverage }}%**
            
            <details>
              <summary>Detalhes de Cobertura</summary>
            
              Este relat√≥rio foi gerado pelo Kover v0.9.1
            
              Para melhorar a cobertura:
              - Adicione testes para fun√ß√µes e classes n√£o testadas
              - Assegure que fluxos condicionais estejam cobertos
              - Verifique que exce√ß√µes e casos de erro s√£o testados
            </details>

      - name: Upload full report
        uses: actions/upload-artifact@v4
        with:
          name: kover-full-report
          path: app/build/reports/kover/

      - name: Check coverage threshold
        run: |
          MIN_COVERAGE=70
          COVERAGE=${{ steps.kover-report.outputs.coverage }}
          
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "::error::‚ö†Ô∏è Cobertura abaixo do limite de ${MIN_COVERAGE}% (Atual: ${COVERAGE}%)"
            exit 1
          else
            echo "‚úÖ Cobertura acima do limite de ${MIN_COVERAGE}%"
          fi
