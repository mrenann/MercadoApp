name: Android Kover Test Coverage

on:
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write
  contents: read

jobs:
  test-coverage:
    name: Generate Test Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with Kover
        run: |
          ./gradlew test koverXmlReport --stacktrace

      - name: Store XML report
        uses: actions/upload-artifact@v4
        with:
          name: kover-xml-report
          path: build/reports/kover/xml/report.xml

      - name: Extract coverage percentage
        id: kover-report
        run: |
          echo "Procurando relat√≥rios em todos os m√≥dulos:"
          find . -name "report.xml" | grep -i kover

          echo "Conte√∫do dos diret√≥rios de relat√≥rios:"
          find . -path "*/build/reports/kover*" -type d | xargs ls -la 2>/dev/null || echo "Nenhum diret√≥rio encontrado"

          if [ -d "app/build/reports/kover" ]; then
            echo "Encontrado diret√≥rio de relat√≥rio no m√≥dulo app:"
            ls -la app/build/reports/kover/
          fi
          
          
          REPORT_FILES=$(find . -name "report.xml" | grep -i kover)
          
          if [ -z "$REPORT_FILES" ]; then
            echo "‚ùå Nenhum arquivo report.xml encontrado"
            COVERAGE_PERCENTAGE="NA"
          else
            TOTAL_COVERED=0
            TOTAL_MISSED=0
          
            echo "Processando os seguintes relat√≥rios:"
            echo "$REPORT_FILES"

            for REPORT_PATH in $REPORT_FILES; do
              echo "Analisando relat√≥rio: $REPORT_PATH"
              echo "Conte√∫do do relat√≥rio:"
              cat "$REPORT_PATH"

              LINE_COVERED=$(grep -o 'type="LINE".*covered="[0-9]*"' "$REPORT_PATH" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*' | awk '{ sum += $1 } END { print sum }')
              LINE_MISSED=$(grep -o 'type="LINE".*missed="[0-9]*"' "$REPORT_PATH" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*' | awk '{ sum += $1 } END { print sum }')
          
              echo "Relat√≥rio $REPORT_PATH - linhas cobertas: $LINE_COVERED, linhas n√£o cobertas: $LINE_MISSED"

              TOTAL_COVERED=$((TOTAL_COVERED + LINE_COVERED))
              TOTAL_MISSED=$((TOTAL_MISSED + LINE_MISSED))
            done
          
            echo "Total combinado - Linhas cobertas: $TOTAL_COVERED, Linhas n√£o cobertas: $TOTAL_MISSED"

            TOTAL_LINES=$((TOTAL_COVERED + TOTAL_MISSED))
          
            if [ "$TOTAL_LINES" -eq 0 ]; then
              echo "‚ö†Ô∏è Nenhuma linha de c√≥digo para testar encontrada em todos os relat√≥rios."
              COVERAGE_PERCENTAGE="NA"
            else
              TOTAL_COVERAGE=$(echo "scale=4; $TOTAL_COVERED / $TOTAL_LINES" | bc)
              COVERAGE_PERCENTAGE=$(echo "scale=2; $TOTAL_COVERAGE * 100" | bc -l)
              echo "üìä Cobertura calculada: ${COVERAGE_PERCENTAGE}%"
            fi
          fi
          
          echo "coverage=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT

          {
            echo "## Relat√≥rio de Cobertura de C√≥digo"
            echo
            echo "### Resumo"
            echo "* Total de linhas cobertas: $TOTAL_COVERED"
            echo "* Total de linhas n√£o cobertas: $TOTAL_MISSED"
            echo "* Total de linhas: $TOTAL_LINES"
            echo "* Porcentagem de cobertura: ${COVERAGE_PERCENTAGE}%"
            echo
            echo "### Relat√≥rios Encontrados"
            echo "$REPORT_FILES"
            echo
            echo "### Conte√∫do dos Relat√≥rios"
          
            for REPORT_PATH in $REPORT_FILES; do
              echo
              echo "#### $REPORT_PATH"
              echo '```xml'
              cat "$REPORT_PATH"
              echo '```'
            done
          } > coverage-report.md
          
          echo "debug_report=coverage-report.md" >> $GITHUB_OUTPUT

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-coverage
          message: |
            ## üìä Cobertura de C√≥digo
            
            **Cobertura Total: ${{ steps.kover-report.outputs.coverage == 'NA' && 'N/A - Sem c√≥digo para testar' || format('{0}%', steps.kover-report.outputs.coverage) }}**
            
            <details>
              <summary>Detalhes de Cobertura</summary>
            
              Este relat√≥rio foi gerado pelo Kover v0.9.1
            
              ${{ steps.kover-report.outputs.coverage == 'NA' && '‚ö†Ô∏è **Aviso**: Nenhuma linha de c√≥digo encontrada para teste. Isto pode indicar que:' || '' }}
              ${{ steps.kover-report.outputs.coverage == 'NA' && '- O projeto n√£o cont√©m c√≥digo test√°vel' || '' }}
              ${{ steps.kover-report.outputs.coverage == 'NA' && '- Kover n√£o est√° configurado para encontrar o c√≥digo-fonte' || '' }}
              ${{ steps.kover-report.outputs.coverage == 'NA' && '- Os testes n√£o est√£o sendo executados corretamente' || '' }}
            
              ${{ steps.kover-report.outputs.coverage != 'NA' && 'Para melhorar a cobertura:' || '' }}
              ${{ steps.kover-report.outputs.coverage != 'NA' && '- Adicione testes para fun√ß√µes e classes n√£o testadas' || '' }}
              ${{ steps.kover-report.outputs.coverage != 'NA' && '- Assegure que fluxos condicionais estejam cobertos' || '' }}
              ${{ steps.kover-report.outputs.coverage != 'NA' && '- Verifique que exce√ß√µes e casos de erro s√£o testados' || '' }}
            </details>

      - name: Upload debug report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-debug-report
          path: coverage-report.md

      - name: Check coverage threshold
        run: |
          MIN_COVERAGE=70
          COVERAGE="${{ steps.kover-report.outputs.coverage }}"
          
          if [ "$COVERAGE" == "NA" ]; then
            echo "‚ö†Ô∏è N√£o foi poss√≠vel calcular a cobertura - sem linhas de c√≥digo para testar"
            # Optionally, you can make this a warning but not a failure
            # exit 0
            # Or make it fail:
            echo "::error::‚ö†Ô∏è Sem linhas de c√≥digo test√°veis encontradas. Verifique a configura√ß√£o do Kover."
            exit 1
          elif (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "::error::‚ö†Ô∏è Cobertura abaixo do limite de ${MIN_COVERAGE}% (Atual: ${COVERAGE}%)"
            exit 1
          else
            echo "‚úÖ Cobertura acima do limite de ${MIN_COVERAGE}%"
          fi