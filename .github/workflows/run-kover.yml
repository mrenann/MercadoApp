name: Android Kover Test Coverage

on:
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write
  contents: read

jobs:
  test-coverage:
    name: Generate Test Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with Kover
        run: ./gradlew koverXmlReport --stacktrace

      - name: Store XML report
        uses: actions/upload-artifact@v4
        with:
          name: kover-xml-report
          path: build/reports/kover/xml/report.xml

      - name: Extract coverage percentage
        id: kover-report
        run: |
          # Display all XML report files
          echo "Finding all XML report files in build directory:"
          find build -name "*.xml" | grep -i report
          
          # Display the directories structure for debugging
          echo "Directory structure for Kover reports:"
          find build/reports -type d | sort
          
          # Check the main expected location
          REPORT_PATH="build/reports/kover/report.xml"
          if [ -f "$REPORT_PATH" ]; then
            echo "‚úÖ Found report at: $REPORT_PATH"
            echo "Complete file content:"
            cat "$REPORT_PATH"
          else
            echo "‚ö†Ô∏è Report not found at standard location, searching alternatives..."
          fi
          
          # Try to run the Kover report generation again with verbose output
          echo "Re-running Kover report generation with verbose output:"
          ./gradlew koverXmlReport --info

          # Install necessary tools
          echo "Installing XML tools..."
          apt-get update -qq && apt-get install -y xmlstarlet libxml2-utils

          # Find the report file
          echo "Searching for the report.xml file..."
          REPORT_FILES=$(find build -name "report.xml" -type f)
          
          if [ -z "$REPORT_FILES" ]; then
            echo "‚ùå No report.xml file found in build directory"
            echo "Generating dummy report for debugging:"
            mkdir -p build/reports/kover
            echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <report name="Kover Coverage Report">
            <counter type="INSTRUCTION" missed="100" covered="0"/>
            <counter type="LINE" missed="20" covered="0"/>
            <counter type="METHOD" missed="5" covered="0"/>
            <counter type="CLASS" missed="1" covered="0"/>
            </report>' > build/reports/kover/dummy-report.xml
            REPORT_PATH="build/reports/kover/dummy-report.xml"
            else
            echo "Found report files:"
            echo "$REPORT_FILES"
            REPORT_PATH=$(echo "$REPORT_FILES" | head -1)
            fi

          echo "Using report file: $REPORT_PATH"
            echo "Report content:"
            cat "$REPORT_PATH"
          
          # Try multiple extraction methods with detailed error reporting
          echo "Extraction Method 1: Using grep for pattern matching..."
          
          # Look for a standard JaCoCo format first
            LINE_COVERED=$(grep -o 'type="LINE".*covered="[0-9]*"' "$REPORT_PATH" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*' || echo "0")
            LINE_MISSED=$(grep -o 'type="LINE".*missed="[0-9]*"' "$REPORT_PATH" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*' || echo "0")
          
          echo "DEBUG - LINE_COVERED: $LINE_COVERED"
          echo "DEBUG - LINE_MISSED: $LINE_MISSED"
          
            if [ -n "$LINE_COVERED" ] || [ -n "$LINE_MISSED" ]; then
            TOTAL=$((LINE_COVERED + LINE_MISSED))
            if [ "$TOTAL" -gt 0 ]; then
            TOTAL_COVERAGE=$(echo "scale=4; $LINE_COVERED / $TOTAL" | bc)
          echo "Method 1 succeeded: $TOTAL_COVERAGE"
            else
          echo "Method 1 calculation failed: Total lines = 0"
            TOTAL_COVERAGE=0
            fi
            else
          echo "Method 1 failed: Could not extract line coverage data"
            TOTAL_COVERAGE=0
            fi
          
            # Calculate coverage percentage
            COVERAGE_PERCENTAGE=$(echo "scale=2; $TOTAL_COVERAGE * 100" | bc -l)
          
            # Ensure the value is valid
            if [[ ! "$COVERAGE_PERCENTAGE" =~ ^[0-9.]+$ ]]; then
          echo "‚ùå Invalid coverage percentage: $COVERAGE_PERCENTAGE"
            COVERAGE_PERCENTAGE="0.00"
            fi
          
          echo "üìä Final Coverage: ${COVERAGE_PERCENTAGE}%"
            echo "coverage=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT
          
            # Create a summary file for debugging
            echo "Creating detailed summary file..."
            {
              echo "## Coverage Extraction Debug Report"
              echo "* Report Path: $REPORT_PATH"
                echo "* Line Covered: $LINE_COVERED"
                echo "* Line Missed: $LINE_MISSED"
                echo "* Total Lines: $((LINE_COVERED + LINE_MISSED))"
                echo "* Raw Coverage Value: $TOTAL_COVERAGE"
                echo "* Coverage Percentage: ${COVERAGE_PERCENTAGE}%"
                      echo
                      echo "### XML Report Content"
                echo '```xml'
                cat "$REPORT_PATH"
                echo '```'
            } > coverage-debug-report.md
          
            # Upload debug report
            echo "debug_report=coverage-debug-report.md" >> $GITHUB_OUTPUT
          
            - name: Comment coverage on PR
            if: github.event_name == 'pull_request'
            uses: marocchino/sticky-pull-request-comment@v2
            with:
            header: test-coverage
            message: |
              ## üìä Cobertura de C√≥digo
          
              **Cobertura Total: ${{ steps.kover-report.outputs.coverage }}%**
          
              <details>
                <summary>Detalhes de Cobertura</summary>
          
                Este relat√≥rio foi gerado pelo Kover v0.9.1
          
                Para melhorar a cobertura:
                - Adicione testes para fun√ß√µes e classes n√£o testadas
                - Assegure que fluxos condicionais estejam cobertos
                - Verifique que exce√ß√µes e casos de erro s√£o testados
              </details>
          
            - name: Upload debug report artifact
            uses: actions/upload-artifact@v4
            with:
            name: coverage-debug-report
            path: coverage-debug-report.md
          
            - name: Check coverage threshold
            run: |
            MIN_COVERAGE=70
            COVERAGE=${{ steps.kover-report.outputs.coverage }}
          
            if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
              echo "::error::‚ö†Ô∏è Cobertura abaixo do limite de ${MIN_COVERAGE}% (Atual: ${COVERAGE}%)"
              exit 1
            else
              echo "‚úÖ Cobertura acima do limite de ${MIN_COVERAGE}%"
            fi